h1. Overview

h2. Goals

The "Eclipse Scout":http://www.eclipse.org/scout project has started to create documentation on "Eclipsepedia/Scout":http://wiki.eclipse.org/Scout. This is a crowdsourcing platform: anybody can contribute and write what he wants on Eclipse Scout. Therefore there is a need to monitor the contributions and to be aware if they derive from a set of guidelines. Like every other project, Eclipse Scout want also to provide content as Eclipse help.

This project prepares the infrastructure to achieve these two goals (monitoring and conversion). 


h2. Files and data structure

The different tools need to store informations for the configuration of the tool (project properties) and the definition of each task (task properties).

For the moment those files are just *.properties files.

h3. Project properties

The project properties define some properties that are use by the different tools (MediaWiki url, local wiki sources directory, ...) 

bc. 
folder.wiki.source=../source
folder.wiki.dist=../dist
folder.navigation.images.source=nav_images
relative.path.images.dist=../../Images
wiki.server.url=http://wiki.eclipse.org
wiki.server.internal.link.pattern=http://wiki.eclipse.org/{0}
wiki.index.url=http://wiki.eclipse.org/index.php
wiki.api.url=http://wiki.eclipse.org/api.php

See "ProjectProperties.java":../main/src/scoutdoc/main/ProjectProperties.java for all supported values. 

h3. Task

The task properties file define some configuration specific to a task. Example:

bc. 
# Task for the "Mini CRM" tutorial
# Fri Jul 13 20:06:33 CEST 2012
output.folder=html/Tutorials/Minicrm
output.toc.file=Tutorials_Minicrm_toc.xml
output.title=Mini CRM Scout application
input.pages.page01=Scout/Tutorial/3.8/Minicrm/Minicrm_Step-by-Step
input.pages.page02=Scout/Tutorial/3.8/Minicrm/New_Eclipse_Scout_Project
input.pages.page03=Scout/Tutorial/3.8/Minicrm/Get_example_database


h3. MediaWiki content organization

Here some input on how the MediaWiki content is stored on the disk (in the @folder.wiki.source@ folder):

First level (MediaWiki namespace):
* Article
* Category
* Image
* Template

For each page:
* @*.mediawiki@ file: source of the page (content of the page, using the mediawiki Markup)
* @*.meta.xml@ file: meta information provided by MediaWiki.

Here an example of how the pages are organized on the disk:

bc. 
  wiki_src
  |  
  +---Article
  |   \---Scout
  |       \---Tutorial
  |           +---3.7
  |           |    HelloWorld.mediawiki
  |           |    HelloWorld.meta.xml
  |           |
  |           \---3.8
  |                HelloWorld.mediawiki
  |                HelloWorld.meta.xml
  +---Image
  |    Newprojectdialog1.png
  |    Newprojectdialog1.png.mediawiki
  |    Newprojectdialog1.png.meta.xml
  |    ...
  |      
  \---Template
       ScoutLink.mediawiki
       ScoutLink.meta.xml
       ...


h2. Usage

There is a single entry point: @scoutdoc.main.Main@ class.

bc. 
usage: scoutdoc.main.Main
 -h,--help                           print this message
 -c,--config <file>                  configuration file
 -t,--task <files>                   (source) one or many task files
 -p,--pages                          (source) use the pages contained in the source folder
 -l,--list <file>                    (source) list of pages contained in the file
 -r,--rss                            (source) use the pages from the rss file
 -o,--operation <operations>         operation: FETCH, CHECK, CONVERT
 -x,--output-checkstyle <filename>   (CHECK output) create a xml checkstyle file (<filename> is optional. Default: Checkstyle.xml)

Usage examples can be found in the next section.

The targets in the ant file @build.xml@ use this main class. Other usage examples can be found there.


h2. Operations and examples

This section describes the different operation with command line usage example.

h3. Operation: FETCH

Download the MediaWiki content in a local directory (pages, pages meta-information, images, templates, ...).

**Fetch content for a task:**

bc. 
scoutdoc.main.Main -o FETCH -c <config_file.properties> -t <task.properties>

With this command line you download pages for a specific task.
* @-c <config_file.properties>@: the project properties file (optional).
* @-t <task.properties>@: the task properties files (1..n).


**Fetch newer pages (based on RSS file):**

bc. 
scoutdoc.main.Main -o FETCH -c <config_file.properties> -r

With this command line you download pages from the RSS Feed (Special:RecentChanges) of the MediaWiki Instance. From the RSS feed, only pages with a newer __revision id__ than what is on the disk are considered.
* @-c <config_file.properties>@: the project properties file (optional).


**Fetch a list of pages:**

bc. 
scoutdoc.main.Main -o FETCH -c <config_file.properties> -l <list.txt>

With this command line you download a list of pages (provided in a txt file).
* @-c <config_file.properties>@: the project properties file (optional).
* @-l <list.txt>@: the list of pages.


**Refresh the pages of the disk:**

bc. 
scoutdoc.main.Main -o FETCH -c <config_file.properties> -p

With this command line you download all pages you have in the source folder (This is like a refresh).
* @-c <config_file.properties>@: the project properties file (optional).
* @-p@: use the pages of the source folder to create the list of pages that are fetched.


h3. Operation: CHECK

The check tool perform some checks over the MediaWiki content.
This allows to verify whether the content match the guideline or not.

Output format: checkstyle xml.

Implemented checks:
* Double redirection: Check if a redirection links to an other redirection (warning or error in case of circular redirection). Solution: it is better to redirect to the target page directly.
* Link to a redirection: Check if a link of a page links to a redirection page (warning). Solution: it is better to link the page directly.

**Check all pages:**

bc. 
scoutdoc.main.Main -o CHECK -c <config_file.properties> -p -x <filename.xml>

With this command line you check all pages of the @wiki_src@ directory.
* @-c <config_file.properties>@: the project properties file (optional).
* @-p@: use the pages of the source folder to create the list of pages that are fetched.
* @-x <filename.xml>@: the name of the output file (default: Checkstyle.xml)


**Check pages of a task:**

bc. 
scoutdoc.main.Main -o CHECK -c <config_file.properties> -t <task.properties>

With this command line you check all pages of the @wiki_src@ directory.
* @-c <config_file.properties>@: the project properties file (optional).
* @-t <task.properties>@: the task properties files (1..n). (It is possible to provide the name of the output file in the task with @output.check.file@)

The tool will check all pages of the task and their links (inclusive redirection).


h3. Operation: CONVERT

**Convert a task:**

bc. 
scoutdoc.main.Main -o CONVERT -c <config_file.properties> -t <task.properties>

With this command line you convert a task to help file content.
* @-c <config_file.properties>@: the project properties file (optional).
* @-t <task.properties>@: the task properties files (1..n).



